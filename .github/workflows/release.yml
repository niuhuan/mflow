name: Build and Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get last commit info
      id: last-commit
      run: |
        $lastCommit = git log -1 --pretty=format:"%H"
        echo "last_commit=$lastCommit" >> $env:GITHUB_OUTPUT
        
        $hasTag = git tag --contains $lastCommit
        if ($hasTag) {
          echo "has_tag=true" >> $env:GITHUB_OUTPUT
          $tagName = $hasTag.Trim()
          echo "tag_name=$tagName" >> $env:GITHUB_OUTPUT
        } else {
          echo "has_tag=false" >> $env:GITHUB_OUTPUT
          echo "tag_name=" >> $env:GITHUB_OUTPUT
        }

    - name: Generate version tag
      id: version
      run: |
        if ("${{ steps.last-commit.outputs.has_tag }}" -eq "false") {
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          echo "version=$timestamp" >> $env:GITHUB_OUTPUT
          echo "create_tag=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "version=${{ steps.last-commit.outputs.tag_name }}" >> $env:GITHUB_OUTPUT
          echo "create_tag=false" >> $env:GITHUB_OUTPUT
        }

    - name: Create Release
      if: steps.version.outputs.create_tag == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check if release exists and has asset
      id: check-release
      uses: actions/github-script@v7
      with:
        script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.version.outputs.version }}'
            });
            
            const hasAsset = release.data.assets.some(asset => 
              asset.name === 'mflow-tauri-app.exe'
            );
            core.setOutput('has_asset', hasAsset.toString());
            core.setOutput('release_id', release.data.id.toString());
            core.setOutput('upload_url', release.data.upload_url);
         

    - name: Setup Node.js
      if: steps.check-release.outputs.has_asset != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'yarn'

    - name: Setup Rust
      if: steps.check-release.outputs.has_asset != 'true'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - name: Install dependencies
      if: steps.check-release.outputs.has_asset != 'true'
      run: yarn install --frozen-lockfile

    - name: Build application
      if: steps.check-release.outputs.has_asset != 'true'
      run: |
        yarn tauri build

    - name: Upload asset to existing release
      if: steps.check-release.outputs.has_asset != 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.check-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/mflow-tauri-app.exe
        asset_name: mflow-tauri-app.exe
        asset_content_type: application/octet-stream
