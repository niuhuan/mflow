name: Build and Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate version tag
      id: version
      run: |
        $version = Get-Content "version.txt" -Raw
        $version = $version.Trim()
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
        # Update package.json version
        $packageJson = Get-Content "package.json" -Raw | ConvertFrom-Json
        $packageJson.version = $version
        $packageJson | ConvertTo-Json -Depth 10 | Set-Content "package.json"
        
        # Update Cargo.toml version
        $cargoToml = Get-Content "src-tauri/Cargo.toml" -Raw
        $cargoToml = $cargoToml -replace 'version = "0.0.0"', "version = `"$version`""
        Set-Content "src-tauri/Cargo.toml" $cargoToml
        
        echo "Updated package.json and Cargo.toml with version: $version"

    - name: Check if release exists
      id: check-release
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.version.outputs.version }}'
            });
            
            const hasAsset = release.data.assets.some(asset => 
              asset.name === 'mflow-tauri-app.exe'
            );
            
            core.setOutput('release_exists', 'true');
            core.setOutput('has_asset', hasAsset.toString());
            core.setOutput('release_id', release.data.id.toString());
            core.setOutput('upload_url', release.data.upload_url);
          } catch (error) {
            core.setOutput('release_exists', 'false');
            core.setOutput('has_asset', 'false');
          }

    - name: Create Release
      if: steps.check-release.outputs.release_exists != 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         

    - name: Setup Node.js
      if: steps.check-release.outputs.has_asset != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'yarn'

    - name: Setup Rust
      if: steps.check-release.outputs.has_asset != 'true'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true

    - name: Install dependencies
      if: steps.check-release.outputs.has_asset != 'true'
      run: yarn install --frozen-lockfile

    - name: Build application
      if: steps.check-release.outputs.has_asset != 'true'
      run: |
        yarn tauri build

    - name: Upload asset to existing release
      if: steps.check-release.outputs.release_exists == 'true' && steps.check-release.outputs.has_asset != 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.check-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/mflow-tauri-app.exe
        asset_name: mflow-tauri-app.exe
        asset_content_type: application/octet-stream
